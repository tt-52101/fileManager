ajax:异步JavaScript 和 XML
    
    所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。 xmlhttp=new XMLHttpRequest();
    XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。

    客户端浏览器发出的请求被封装成为一个HttpServletRequest对象。
    此类中重写两个方法doGet和doPost，刚好对应XMLHttpRequest中的“GET”和“POST”方法。
    GET参数通过URL传递，POST放在Request body中。
    详细关于post和get:
    https://www.cnblogs.com/logsharing/p/8448446.html 
    https://www.cnblogs.com/zhuanzhuruyi/p/6508565.html


form的提交方式：
    action属性指定提交位置（url）,type属性指定提交方式 
    用ajax提交表单注意有很多坑，大概好像是input type 不能写成submit,button的方法也不能用submit命名。否则
会默认表单提交。


jquery方法 serializeObject()转化成JavaScript对象。
serialize() 方法通过序列化表单值创建 URL 编码文本字符串。
您可以选择一个或多个表单元素（如输入和/或文本区），或表单元素本身。
序列化的值可在生成 AJAX 请求时用于 URL 查询字符串中。
	url编码是一种浏览器用来打包表单输入的格式。浏览器从表单中获取所有的name和其中的值 ，将它们以name/value参数编码
	（移去那些不能传送的字符，将数据排行等等）作为URL的一部分或者分离地发给服务器。
	不管哪种情况，在服务器端的表单输入格式样子象这样：
	theName=Ichabod+Crane&gender=male&status=missing& ;headless=yes


首先来看看JQuery中的 $() 这个符号，实际上这个符号在JQuery中相当于JQuery（）,
即$(this)=jquery();也就是说，这样可以返回一个jquery对象。
那么，当你在网页中alert($('#id'));时，会弹出一个[object Object ]，这个object对象，也就是jquery对象了。


jquery 是js的一个库,取html的元素以及各个元素的事件处理很方便。
jquery js dom的关系（this）：
https://www.cnblogs.com/gfl123/p/8080484.html
html+jquery+ajax 和react开发有很大的区别

js当中 ：JSON.stringify() 方法用于将 JavaScript值转换为 **JSON字符串**。
 
SpringMVC-DispatcherServlet工作流程及web.xml配置
工作流程：
1.Web中，无非是请求和响应；
2.在SpringMVC中，请求的第一站是DispatcherServlet，充当前端控制器角色；
3.DispatcherServlet会查询一个或多个处理器映射（handler mapping）并根据请求所携带的URL信息进行决策，将请求发送给哪个SpringMVC控制器（controller）；
4.控制器做两件事：一是将数据打包，二是定义逻辑视图名，然后返回给DispatcherServlet；
5.DispatcherServlet通过视图解析器（view resolver）来将逻辑视图名匹配为一个特定的视图实现，它可能是也可能不是JSP；
6.交付数据模型，以视图形式响应给客户，整个请求流程完成。


 function sbmt(){
            $.ajax({
            //JSON.stringify(data)的方式就能将对象变成字符串。
            //同时ajax请求的时候也要指定dataType: "json",contentType:"application/json" 
                type: "POST",//方法类型
                dataType: "json",//预期服务器返回的数据类型
                url: "/login" ,//url
                data: JSON.stringify($("form").serializeObject()),
                contentType:"application/json",
                success: function (result) {
                //datatype 是 “json ” result是js对象。
                //jquery就会把后端返回的字符串尝试通过JSON.parse()尝试解析为js对象
                //如果datatype是text，传输过来的result=String连带着引号一起，
                	for (var i = 0; i < result.length; i++) {                        
                		alert(result[i].password);//打印服务端返回的数据(调试用) 
                    }
                    
                },
                error : function(result) {
                	for (var i = 0; i < result.length; i++) {                        
                		alert(result[i].id);//打印服务端返回的数据(调试用) 
                    }
                }
            });
        }
        $.fn.serializeObject = function() {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function() {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];                        
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';                
                }
            });
            return o;
        };

        <form >
        <p>name:<input type="text" name="name" /></p>
        <p>password:<input type="password" name="password" /></p>
        <!-- onclick绑定事件不能和type名称一样 -->
        <input type="submit" onclick="sbmt()"/>
    </form>
    submit改成button 
    
    先static文件夹以及templates文件夹是受保护的，也就是说相当于你将文件放到了传统的ssh或ssm项目的WEB-INF下了。
    所以也就是说这两个文件夹下的文件是无法通过url直接访问的，以至于在springmvc下使用重定向会报404
    
    @RequestMapping(value = {"/login"}, method = { RequestMethod.POST})
    @ResponseBody
    public List<FmUser> getUserList(@RequestBody String params) {
    	System.out.println(params);//@RequestBody接收的是一个Json对象的字符串，而不是一个Json对象
    	JSONObject obj=JSON.parseObject(params);
    	System.out.println(obj.getString("name"));
    	
        List<FmUser> list = this.userService.getUserList();
        return list;
    }
    
    
    
    在sources->webapp下的文件可以通过浏览器中输入文件+后缀名的方式直接访问的.  
一、sources->webapp下的文件是不是就是是不需要通过服务器内部进行访问的。
二、templates文件夹，是放置模板文件的，因此需要视图解析器来解析它。所以必须通过服务器内部进行访问，也就是要走控制器--服务--视图解析器这个流程才行。
三、static文件夹，既不能直接访问，也不能通过服务器访问到。因此，这个文件夹，可能是放一些css、图片这样的文件供服务器内部引用。


传统javabean更多地作为值传递参数，
而spring中的bean用处几乎无处不在，任何组件都可以被称为bean。

写法不同：传统javabean作为值对象，要求每个属性都提供getter和setter方法；
但spring中的bean只需为接受设值注入的属性提供setter方法。

生命周期不同：传统javabean作为值对象传递，不接受任何容器管理其生命周期；
spring中的bean由spring管理其生命周期行为。